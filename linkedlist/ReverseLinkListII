/*
Reverse Link List II
Reverse a linked list from position m to n. Do it in-place and in one-pass.
For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,
return 1->4->3->2->5->NULL.
Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

Note 2:
Usually the version often seen in the interviews is reversing the whole linked list which is obviously an easier version of this question.
*/
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode A, int B, int C) {
        ListNode dummy = new ListNode(0);
        dummy.next = A;
        int count = 1;
        ListNode pre = dummy, curr = A;
        while(curr!=null && count < B){
            pre = curr;
            curr = curr.next;
            count ++;
        }
        while(count < C && curr!=null){
            ListNode nt = curr.next.next;  
            curr.next.next = pre.next;  
            pre.next = curr.next;  
            curr.next = nt;  
            ++count;
        }
        return dummy.next;
    }
}
